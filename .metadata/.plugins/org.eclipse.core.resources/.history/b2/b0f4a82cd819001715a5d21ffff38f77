import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.util.ArrayList;
import java.util.Random;
public class MesaResource {

 private Connection connection;
	
 public MesaResource(Connection connection){
	 
	 this.connection=connection;
 }
	
 
 
	
 public String getKPI(String parameter1, String parameter2) throws SQLException{
	    
    	Statement stmt = null;
    	String jsonInString="";
    	stmt = this.connection.createStatement();
    	Gson gson = new GsonBuilder().create();
    	
    	Random randomGenerator = new Random();
        int randomInt = randomGenerator.nextInt(10000);
        
        if(parameter1 == null && parameter1.isEmpty()){
        	
        	parameter1="EE";
        }
        
		  if(parameter2 == null && parameter2.isEmpty()){
		        	
		        	parameter2="DQKPI";
		   }
        
        String queryString="SELECT DISTINCT dim2.expected_result_cnt,dim2.validation_rule_comment,dim2.quality_metric_type_name,"
				  +"f.fact_row_no,dim1.service_main_group_name,f.fact_col_no,dim2.expected_result_amt,f.measure_amt,dim1.service_domain_name"
				  +", dim2.since201702_metric_cnt, dim2.expected_result_cnt,dim1.service_domain_name,f.measure_fact_date "
				  +"FROM mesa.PL_MEASURE_FACT_PRT f INNER JOIN mesa.PL_SERVICE_PRT dim1 ON (f.validation_service_shortname = dim1.Service_Component_ShortName) "
				  +"INNER JOIN mesa.PL_VALIDATION_RULE_EXT dim2 ON (f.Validation_Rule_Id = dim2.Validation_Rule_Id) WHERE f.country_shortname='"+parameter1+"'"
				  +"AND dim2.quality_metric_categ_shortname='"+parameter2+"' AND f.fact_row_no='10' AND f.fact_col_no='7';";
        System.out.println(queryString);
    	ResultSet rs = stmt.executeQuery(queryString);
    	while(rs.next()) {
    	  //int numColumns = rs.getColumnCount();
    
    	 // for (int i=1; i<=numColumns; i++) {
    	   // String column_name = rsmd.getColumnName(i);
    	  
    		Format_conformacy model=new Format_conformacy();
    		model.setKPI(rs.getInt("measure_amt"));
    		model.setServiceName(rs.getString("service_main_group_name"));
    		model.setValidationRule(rs.getString("validation_rule_comment"));
    		//String  name = rs.getString("measure_text");
    		//System.out.println(name);
    	  
    	    jsonInString = gson.toJson(model);
    	 // }

    	}
    	
        rs.close();
        stmt.close();
        
        return jsonInString;
    	
    }


public String getAllMeasuresCnt(String parameter1, String parameter2) throws SQLException{
	    
 	Statement stmt = null;
 	String jsonInString="";
 	stmt = this.connection.createStatement();
 	Gson gson = new GsonBuilder().create();
 	ArrayList responseArray = new ArrayList();
 	ResultSet rs = stmt.executeQuery( "SELECT DISTINCT f.validation_rule_id,dim2.validation_rule_comment,dim2.quality_metric_type_name,f.fact_row_no,dim1.service_main_group_name,f.fact_col_no,dim2.expected_result_amt,f.measure_amt,dim1.service_domain_name, dim2.expected_result_cnt,f.run_dttm FROM mesa.PL_MEASURE_FACT_PRT f INNER JOIN mesa.PL_SERVICE_PRT dim1 ON (f.validation_service_shortname = dim1.Service_Component_ShortName) INNER JOIN mesa.PL_VALIDATION_RULE_EXT dim2 ON (f.Validation_Rule_Id = dim2.Validation_Rule_Id) WHERE f.country_shortname='EE' AND dim1.service_main_group_name='BB Data Warehouse' and f.fact_row_no=1; ;" );
 	while(rs.next()) {
 	  //int numColumns = rs.getColumnCount();
 
 	 // for (int i=1; i<=numColumns; i++) {
 	   // String column_name = rsmd.getColumnName(i);
 	  
 		CompletenessModel model=new CompletenessModel();
 		model.setMeasureAmt(rs.getInt("measure_amt"));
 		model.setDate(rs.getString("run_dttm"));
 		model.setQualityMetricType(rs.getString("quality_metric_type_name"));
 		//Date d1 = new Date(rs.getDate("date_time").getTime());
 		//String  name = rs.getString("measure_text");
 		//System.out.println(name);
 	   
 	    responseArray.add(model);
 	 // }

 	}
 	 jsonInString = gson.toJson(responseArray);
     rs.close();
     stmt.close();
     
     return jsonInString;
 	
 }


public String getCompletness(String parameter1, String parameter2) throws SQLException{
    
 	Statement stmt = null;
 	String jsonInString="";
 	stmt = this.connection.createStatement();
 	Gson gson = new GsonBuilder().create();
 	ArrayList responseArray = new ArrayList();
 	ResultSet rs = stmt.executeQuery( "SELECT DISTINCT f.validation_rule_id,dim2.validation_rule_comment,dim2.quality_metric_type_name,f.fact_row_no,dim1.service_main_group_name,f.fact_col_no,dim2.expected_result_amt,f.measure_amt,dim1.service_domain_name, dim2.expected_result_cnt,f.run_dttm FROM mesa.PL_MEASURE_FACT_PRT f INNER JOIN mesa.PL_SERVICE_PRT dim1 ON (f.validation_service_shortname = dim1.Service_Component_ShortName) INNER JOIN mesa.PL_VALIDATION_RULE_EXT dim2 ON (f.Validation_Rule_Id = dim2.Validation_Rule_Id) WHERE f.country_shortname='EE' AND dim1.service_main_group_name='BB Data Warehouse' and f.fact_row_no=1 AND dim2.quality_metric_type_name='COMPLETENESS' ORDER BY f.run_dttm ;" );
 	while(rs.next()) {
 	  //int numColumns = rs.getColumnCount();
 
 	 // for (int i=1; i<=numColumns; i++) {
 	   // String column_name = rsmd.getColumnName(i);
 	  
 		CompletenessModel model=new CompletenessModel();
 		model.setMeasureAmt(rs.getInt("measure_amt"));
 		model.setDate(rs.getString("run_dttm"));
 		model.setQualityMetricType(rs.getString("quality_metric_type_name"));
 		//Date d1 = new Date(rs.getDate("date_time").getTime());
 		//String  name = rs.getString("measure_text");
 		//System.out.println(name);
 	   
 	    responseArray.add(model);
 	 // }

 	}
 	 jsonInString = gson.toJson(responseArray);
     rs.close();
     stmt.close();
     
     return jsonInString;
 	
 }
}
/* public String getCountryCodes(String parameter1, String parameter2) throws SQLException{
	    
	 	Statement stmt = null;
	 	String jsonInString="";
	 	stmt = this.connection.createStatement();
	 	Gson gson = new GsonBuilder().create();
	 	ResultSet rs = stmt.executeQuery("SELECT DISTINCT run_country_shortname FROM mesa.PL_MEASURE_FACT_PRT;" );
	 	while(rs.next()) {
	 	  //int numColumns = rs.getColumnCount();
	 
	 	 // for (int i=1; i<=numColumns; i++) {
	 	   // String column_name = rsmd.getColumnName(i);
	 	  
	 		Format_conformacy model=new Format_conformacy();
	 		model.setCompletness(rs.getInt("measure_text"));
	 		//String  name = rs.getString("measure_text");
	 		//System.out.println(name);
	 	  
	 	    jsonInString = gson.toJson(model);
	 	 // }

	 	}
	 	
	     rs.close();
	     stmt.close();
	     System.out.println(jsonInString);
	     return jsonInString;
	 	
	 }
	
}*/
